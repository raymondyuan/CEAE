<img class="centerContent" src="https://delaware.qualtrics.com/CP/Graphic.php?IM=IM_d1nXGoQfrEPfFY1" style="width: 100%;" />
<noscript style="color:red">
	<b>This survey requires Javascript. Your browser either doesn't support Javascript or you have it turned off.</b><br><br>
	For instructions on enabling Javascript, please visit : 
	<a href="http://enable-javascript.com/" target="_blank">enable-javascript.com</a>
	<br><br>
	Note: You may need to refresh this page afterwards.
	<style>
	#Questions, #NextButton{
	display: none;
	}
	</style>
</noscript>

<script src="https://code.jquery.com/jquery-1.9.1.min.js"></script>
<script>jQuery.noConflict();</script>

<script>

//----------------Mobile-------------------------------//

jQuery('head').append('<meta name="mobile-web-app-capable" content="yes">');
jQuery('#Logo').hide();

// Appends a new style to the head tag.
function addNewStyle(newStyle) {
    var styleElement = document.getElementById('styles_js');
    if (!styleElement) {
        styleElement = document.createElement('style');
        styleElement.type = 'text/css';
        styleElement.id = 'styles_js';
        document.getElementsByTagName('head')[0].appendChild(styleElement);
    }
    styleElement.appendChild(document.createTextNode(newStyle));
}

// Some simple CSS tweaks for better mobile use
if( /Android|webOS|iPhone|iPad|iPod|IEMobile|Opera Mini|BlackBerry/i.test(navigator.userAgent) ) {
	jQuery( document ).ready(function() {
	jQuery('.SkinInner').css('width', '100%');
	addNewStyle('.Skin {margin-left: 2% !important;}');
	addNewStyle('.Skin {margin-right: 2% !important;}');
	addNewStyle('#tooltip {font-size: 1.5em !important;}');
	addNewStyle('.QuestionText {font-size:2em !important;}');
	//addNewStyle('.QuestionText {font-weight: bold !important;}');
	addNewStyle('.ChoiceStructure .LabelWrapper {font-size: 1.5em !important;}');
	addNewStyle('.ChoiceStructure li {min-height: 3.5em !important;}');
	addNewStyle('input[type="text"] {height: 1.2em !important;}');
	addNewStyle('input[type="text"] {font-size:2em !important;}');
	addNewStyle('input[type="text"].TextEntryBox {width: 60% !important;}');
	addNewStyle('input[type="text"].SumInput {height: 1.2em !important;}');
	addNewStyle('input[type="text"].SumInput {font-size:2em !important;}');
	addNewStyle('.SumInput input, .SumTotal input {width: 20% !important;}');
	//addNewStyle('.SumInput, .SumTotal {right: 10em !important;}');
	jQuery('#Logo').css('width', '100%');
});
}

//-------------Main Functions------------------------//
/*
@author: Michael Griner
@summary: This function takes care of the input question
		for sliders.  Detects changes in input box
		and updates the other parts of this 3-part question.
@param qid1: QID for first of three questions, this is input question.
@param qid2: QID for second of three questions, this is the slider/calculation question.
@param qid3: QID for third of three questions, this is the results question.
@param inputType: String of type of question, e.g. "5ftSeed"
@requres: Because of how the Qualtrics API works these questions must
		maintain the proper internal order of their choices.
*/
/*
@updated by: Mengyuan Ren
@summary: the options of slider/calculation question has been changed
*/
function sliderInput(qid1, qid2, qid3, inputType, thisQuestion){
	// Maintaining logic between questions
	thisQuestion.questionclick = function(event,element){
		// If "No" or N/A is selected reset values.
		/*
		if(element.id == 'QR~' + qid1 + '~2' || element.id == 'QR~' + qid1 + '~3'){
			$('QR~' + qid1 + '~1~TEXT').value = '';
			var input = $('QR~' + qid1 + '~1~TEXT');
			updateHTML(input, inputType, qid2, qid3);
		}
		*/
		if(element.id == 'QR~' + qid1 + '~3' || element.id == 'QR~' + qid1 + '~4'){
			$('QR~' + qid1 + '~1~TEXT').value = '';
			var input = $('QR~' + qid1 + '~1~TEXT');
			updateHTML(input, inputType, qid2, qid3, 0);
		}
	}
	if(element.id == 'QR~' + qid1 + '~1'){
		// When anything happens in the input box update the displays.
		jQuery('#QR\\~' + qid1 + '\\~1\\~TEXT').on('propertychange keyup input paste', function(){
			var input = $('QR~' + qid1 + '~1~TEXT');
			updateHTML(input, inputType, qid2, qid3, 1);
		});
	}
	if(element.id == 'QR~' + qid1 + '~2'){
		// When anything happens in the input box update the displays.
		jQuery('#QR\\~' + qid1 + '\\~2\\~TEXT').on('propertychange keyup input paste', function(){
			var input = $('QR~' + qid1 + '~2~TEXT');
			updateHTML(input, inputType, qid2, qid3, 2);
		});
	}
}



/*
@author: Michael Griner
@summary: This function detects changes on the slider and updates
		the other two questions accordingly when a change has occured.
		It also injects the display text under the slider.
@param qid1: QID for first of three questions, this is input question.
@param qid2: QID for second of three questions, this is the slider/calculation question.
@param qid3: QID for third of three questions, this is the results question.
@param inputType: String of type of question, e.g. "5ftSeed"
@requres: Because of how the Qualtrics API works these questions must
		maintain the proper internal order of their choices.
*/   
function sliderQuestion(qid1, qid2, qid3, inputType, initValue, thisQuestion){
	// Fix Slider Labels
	var newElement = '<table role="presentation" id="customLabel" style="width:100%" class="LabelDescriptions">\
					<tbody>\
						<tr class="LabelCount1">\
							<td class="LightText Last" width="100%"><label>Bid %</label></td>\
						</tr>\
					</tbody>\
				</table>';
	jQuery('#' + qid2 + '\\~1\\~ResultsTd').prepend(newElement);
	jQuery('#' + qid2 + '\\~1\\~result').addClass('sliderInput');
	
	// initialize slider value on survey
	if(!parseInt($('QR~' + qid3 + '~5').value)){
		$(qid2 + '~1~result').value = initValue;
	}
	else{
		$(qid2 + '~1~result').value = $('QR~' + qid3 + '~5').value;
	}
	
	// Store the starting percent in the results, but only once.
	if($('QR~' + qid3 + '~4').value != '')
		jQuery('#QR~' + qid3 + '~4 :input').prop("disabled", true);
	else{
		$('QR~' + qid3 + '~4').value = initValue;
		$('QR~' + qid3 + '~5').value = initValue;
	}
	
	// Could not access slider through Qualtrics so
	// we have to set a timer(ugh) and check for changes
	// in the text box next to the slider.
	var sliderValue = "";
	setInterval(checkSlider, .5);

	function checkSlider() {

		var currentSliderValue = parseInt($(qid2 + '~1~result').value);
		
		// Set to 0 if not a valid number
		if (!currentSliderValue || /[^0-9.]/.test(currentSliderValue)){
			currentSliderValue = 0;
		}
			
		// Updating values on slider change
		if (currentSliderValue != sliderValue) {
			sliderValue = currentSliderValue;
			
			// Store it as Ending Percent in results.
			$('QR~' + qid3 + '~5').value = sliderValue;
			
			var input = $('QR~' + qid1 + '~1~TEXT');
			updateHTML(input, inputType, qid2, qid3, 0);	
		}
	}

	// This injects the results/calculation text underneath the slider.
	window.onload=createResultsHTML(qid2, inputType);
}



// Inserts commas in a number at the standard intervals.
// @param val: A number to insert commas into.
// @return: The number with commas inserted.
function commaSeparateNumber(val){
    while (/(\d+)(\d{3})/.test(val.toString())){
      val = val.toString().replace(/(\d+)(\d{3})/, '$1'+','+'$2');
    }
    return val;
  }

// Updates the dynamic html elements
// @param inputObject: the element being used for input, part of a question ID.
// @param bufferInfo: string representing which buffer combo
// 					  this is for, e.g. "5ftSeed" or "10ftSod" etc.
// @param sliderID: ID of the slider question for this set.
// @param resultID: ID of the results question for this set.
// @modifies: The dynamic html elements for this set of questions.
// Updated for more kinds of combo
function updateHTML(inputObject, bufferInfo, sliderID, resultID, sideType){

	var bufferLength = 0;
	if(bufferInfo == "PoultryHouse")
		var bufferLength = inputObject.toString();
	else
		var bufferLength = inputObject.value;
	
	bufferLength = bufferLength.replace(/,/g, '');
	bufferLength = bufferLength.replace(/\s/g, '');
	bufferLength = bufferLength.replace(/[^0-9\.]+/g, '');
	
	// checking for input errors (must be number)
	if (!bufferLength || /[^0-9.]/.test(bufferLength)){
		bufferLength = 0;
	}
	
	// have to parse after regex or it wont catch errors
	bufferLength = parseFloat(bufferLength);
	
	// Set up buffer size, material cost factor, and square footage
	// based on which buffer combo is used for this set.
	var bufferSize = 0;
	
	if(sideType == 2) {
		if(bufferInfo == "5ftSeed" || bufferInfo == "5ftSod" || bufferInfo == '5ftForest'){
			bufferSize = (5 * 2);
		}
		else if(bufferInfo == "15ftSeed" || bufferInfo == "15ftSod" || bufferInfo == '15ftForest'){
			bufferSize = (15 * 2);
		}
		else if(bufferInfo == "30ftSeed" || bufferInfo == "30ftSod" || bufferInfo == '30ftForest'){
			bufferSize = (30 * 2);
		}
	}
	else if(sideType == 1) {
		if(bufferInfo == "5ftSeed" || bufferInfo == "5ftSod" || bufferInfo == '5ftForest'){
			bufferSize = (5);
		}
		else if(bufferInfo == "15ftSeed" || bufferInfo == "15ftSod" || bufferInfo == '15ftForest'){
			bufferSize = (15);
		}
		else if(bufferInfo == "30ftSeed" || bufferInfo == "30ftSod" || bufferInfo == '30ftForest'){
			bufferSize = (30);
		}
	}
		
	var materialFactor = 0;
	if(bufferInfo == "5ftSeed" || bufferInfo == "15ftSeed" || bufferInfo == "30ftSeed"){
		materialFactor = .06;
	}
	else if(bufferInfo == "5ftSod" || bufferInfo == "15ftSod" || bufferInfo == "30ftSod"){
		materialFactor = .35;
	}
	
	if(bufferInfo == '5ftForest'){
		materialFactor = .18;
	}
	else if(bufferInfo == '15ftForest'){
		materialFactor = .18;
	}
	else if(bufferInfo == '30ftForest'){
		materialFactor = .18;
	}
		
	var squareFeet = parseFloat(bufferLength * bufferSize);
	// Display 0 if not a number
	if(isNaN(squareFeet))
		squareFeet = 0;
	
	// Calculate and update costs
	var materialCost = materialFactor * squareFeet;
	var oppCost = .02 * squareFeet;
	var totalCost = materialCost + oppCost;
	
	if(bufferInfo == "TankPhosphorous" || bufferInfo == "TrenchPhosphorous"){
			if(bufferInfo == 'TankPhosphorous'){
				totalCost = bufferLength * 10700;
			}
			else if(bufferInfo == 'TrenchPhosphorous'){
				totalCost = bufferLength * 17200;
			}
		}
	if(bufferInfo == "PoultryHouse")
		totalCost = bufferLength * 1.4;
	
	jQuery("#bufferLength" + bufferInfo).html(commaSeparateNumber(Math.round(bufferLength)));
	jQuery("#materialCost" + bufferInfo).html(commaSeparateNumber(Math.round(materialCost)));
	jQuery("#oppCost" + bufferInfo).html(commaSeparateNumber(Math.round(oppCost)));
	jQuery("#totalCost" + bufferInfo).html(commaSeparateNumber(Math.round(totalCost)));
	jQuery("#totalCostSlider" + bufferInfo).html(commaSeparateNumber(Math.round(totalCost)));
	
	// Need to hide and show entire html block,
	// some browsers would not update html properly.
	//var htmlOutput = jQuery("#html" + bufferInfo).html();
	//jQuery("#html" + bufferInfo).hide().html(htmlOutput).show();	

	// Detecting slider changes
	var sliderValue = $(sliderID + '~1~result').value;
	if (!sliderValue || /[^0-9.]/.test(sliderValue))
		sliderValue = 0;
	// Calculate and display values associated with slider
	var percent = parseFloat(sliderValue) * .01;
	var userCost = (totalCost * percent);
	
	$('userCost' + bufferInfo).innerHTML = commaSeparateNumber(Math.round(userCost));
	$('udCost' + bufferInfo).innerHTML = commaSeparateNumber(Math.round((totalCost - userCost)));
	
	// Update the results question so Qualtrics can store the results
	// as a question answer.
	$('QR~' + resultID + '~1').value = commaSeparateNumber(parseFloat(totalCost).toFixed(3));
	$('QR~' + resultID + '~2').value = commaSeparateNumber(parseFloat(userCost).toFixed(3));
	$('QR~' + resultID + '~3').value = commaSeparateNumber(parseFloat((totalCost - userCost)).toFixed(3));
	
	// Need to hide and show entire html block,
	// some browsers would not update html properly.
	//var htmlResultsOutput = jQuery("#htmlResults" + bufferInfo).html();
	//jQuery("#htmlResults" + bufferInfo).hide().html(htmlResultsOutput).show();
}

// This function injects the results html underneath the slider.
// Workaround for custom placement of text in the qualtrics
// questions.
// @param questionID: The ID of the question where text will be placed.
// @param bufferInfo: String representing this sets buffer combo, e.g. "5ftSeed" etc.
function createResultsHTML(questionID, bufferInfo){
	// Inject the element
	var parentElement = $(questionID).getElementsByClassName('InnerInner')[0];
	
	var childElement = document.createElement('div');
	childElement.id = 'displayCosts' + bufferInfo;
	childElement.className = 'QuestionText';
	
	parentElement.appendChild(childElement);
	
	// Add the HTML
	var newElement = $('displayCosts' + bufferInfo);
	newElement.innerHTML =  "\
	<span id='htmlResults" + bufferInfo + "'>\
		<table>\
			<tr>\
				<td class='resultsLabel'>Total Cost:</td>\
				<td class='resultsValue'>$<span id='totalCostSlider" + bufferInfo + "'>0</span></td>\
			</tr>\
			<tr>\
				<td class='resultsLabel'><span class='userCostdef tooltip' rel='tooltip2' title='Amount that of the project cost that you will pay the third party vendor'>Your Cost</span>:</td>\
				<td class='resultsValue'>$<span id='userCost" + bufferInfo + "'>0</span></td>\
			</tr>\
			<tr>\
				<td class='resultsLabel'><span class='udCostdef tooltip' rel='tooltip2' title='Amount of the project cost that UD will pay the third party vendor.'>UD's Cost</span>:</td>\
				<td class='resultsValue'>$<span id='udCost" + bufferInfo + "'>0</span></td>\
			</tr>\
		</table>\
	</span>";
	
	jQuery(function(){
		var targets = jQuery( '[rel~=tooltip2]' ),
		target  = false,
		tooltip = false,
		title   = false;
	   
		targets.on( 'mouseenter', function(){
			target = jQuery( this );
			tip = target.attr( 'title' );
			tooltip = jQuery( '<div id="tooltip"></div>' );
						
			if( !tip || tip == '' )
				return false;
						
			target.removeAttr( 'title' );
			tooltip.css( 'opacity', 0 ).html( tip ).appendTo( 'body' );
						
			var init_tooltip = function(){
				if( jQuery( window ).width() < tooltip.outerWidth() * 1.5 )
					tooltip.css( 'max-width', jQuery( window ).width() / 2 );
				else
					tooltip.css( 'max-width', 340 );
							
				var pos_left = target.offset().left + ( target.outerWidth() / 2 ) - ( tooltip.outerWidth() / 2 ),
						pos_top  = target.offset().top - tooltip.outerHeight() - 20;
							
				if( pos_left < 0 ){
					pos_left = target.offset().left + target.outerWidth() / 2 - 20;
					tooltip.addClass( 'left' );
				}
				else
					tooltip.removeClass( 'left' );
							
				if( pos_left + tooltip.outerWidth() > jQuery( window ).width() ){
					pos_left = target.offset().left - tooltip.outerWidth() + target.outerWidth() / 2 + 20;
					tooltip.addClass( 'right' );
				}
				else
					tooltip.removeClass( 'right' );
							
				if( pos_top < 0 ){
					var pos_top  = target.offset().top + target.outerHeight();
					tooltip.addClass( 'top' );
				}
				else
					tooltip.removeClass( 'top' );
				tooltip.css( { left: pos_left, top: pos_top } ).animate( { top: '+=10', opacity: 1 }, 50 );
			};
			
			init_tooltip();
			jQuery( window ).resize( init_tooltip );
						
			var remove_tooltip = function(){
				tooltip.animate( { top: '-=10', opacity: 0 }, 50, function(){
					jQuery( this ).remove();
				});
							
				target.attr( 'title', tip );
			};
				
			target.attr( 'title', tip );
			target.on( 'mouseleave', remove_tooltip );
			tooltip.on( 'click', remove_tooltip );
		});
	});
}


// TOOLTIP FUNCTION
// SOURCE: http://osvaldas.info/elegant-css-and-jquery-tooltip-responsive-mobile-friendly
jQuery( function(){   
	jQuery('.nmpr').attr('title','Management practices designed to reduce the amount of pollution that rain and snow melt wash from land areas into nearby waters.');
	jQuery('.bmp').attr('title','Management practices (such as nutrient management) or structural practices (such as vegetative buffers) designed to reduce the amount of pollution that rain and snow melt wash from land areas into nearby waters.');
	jQuery('.nitrogen').attr('title','An element that is a component of protein structures in living organisms. Excess nitrogen is a common pollutant in impaired waters.');
	jQuery('.nutrients').attr('title','Chemicals that are needed by plants and animals for growth. In waterways, excess nutrients can reduce water quality by promoting the excessive growth and subsequent decay of plants, especially algae.');
	jQuery('.phosphorus').attr('title','An element essential to the growth and development of plants, but which, in excess, can cause unhealthy conditions that threaten aquatic animals.');
	jQuery('.pollutant').attr('title','A contaminant that adversely alters the physical, chemical or biological properties of the environment. The term includes nutrients, sediment, pathogens, toxic metals, carcinogens, oxygen-demanding materials, and all other harmful substances.');
	jQuery('.runoff').attr('title','Water that is not absorbed by soil, which drains off the land into bodies of water, either in surface or underground flows.');
	jQuery('.sediment').attr('title','Particles of sand, clay, silt and plant or animal matter carried in water.');
	jQuery('.watershed').attr('title','The area of land from which rainfall and snow melt drains into a single point. Watersheds are also sometimes referred to as drainage basins or drainage areas. Large watersheds may be composed of several smaller "subwatersheds."');
	jQuery('.wetlands').attr('title','Areas that are inundated or saturated by surface water or groundwater, and that support vegetation adapted to saturated soil conditions. Wetlands generally include swamps, marshes, bogs and similar areas.');
	jQuery('.landownercost').attr('title','An individual incurs landowner compensation for the loss of earnings from crops that could have grown in place of the buffer.');
	jQuery('.nmp').attr('title','A strategy to manage the amount, placement, timing and application of nutrients.');
	//jQuery('.udCostdef').attr('title','Amount of the project cost that UD will pay the third party vendor.');
	//jQuery('.userCostdef').attr('title','Amount that of the project cost that you will pay the third party vendor');
	jQuery('.wqb').attr('title','Reduction of nutrients entering nearby waters.');
	jQuery('.apd').attr('title','Voluntary agreements where landowners agree to continue to use their land only for agriculture for at least 10 years.');
	jQuery('.cae').attr('title','Purchases of development rights by the Foundation, placing a permanent agricultural conservation easement on the property.');
		
	var targets = jQuery( '[rel~=tooltip]' ),
			target = false,
			tooltip = false,
			title = false;
	   
	targets.on( 'mouseenter', function(){
		target = jQuery( this );
		tip = target.attr( 'title' );
		tooltip = jQuery( '<div id="tooltip"></div>' );
						
		if( !tip || tip == '' )
			return false;
						
		target.removeAttr( 'title' );
		tooltip.css( 'opacity', 0 ).html( tip ).appendTo( 'body' );
						
		var init_tooltip = function(){
			if( jQuery( window ).width() < tooltip.outerWidth() * 1.5 )
				tooltip.css( 'max-width', jQuery( window ).width() / 2 );
			else
				tooltip.css( 'max-width', 340 );
							
			var pos_left = target.offset().left + ( target.outerWidth() / 2 ) - ( tooltip.outerWidth() / 2 ),
					pos_top = target.offset().top - tooltip.outerHeight() - 20;
							
			if( pos_left < 0 ){
				pos_left = target.offset().left + target.outerWidth() / 2 - 20;
				tooltip.addClass( 'left' );
			}
			else
				tooltip.removeClass( 'left' );
							
			if( pos_left + tooltip.outerWidth() > jQuery( window ).width() ){
				pos_left = target.offset().left - tooltip.outerWidth() + target.outerWidth() / 2 + 20;
				tooltip.addClass( 'right' );
			}
			else
				tooltip.removeClass( 'right' );
							
			if( pos_top < 0 ){
				var pos_top  = target.offset().top + target.outerHeight();
				tooltip.addClass( 'top' );
			}
			else
				tooltip.removeClass( 'top' );
				tooltip.css( { left: pos_left, top: pos_top } ).animate( { top: '+=10', opacity: 1 }, 50 );
			};
						
			init_tooltip();
			jQuery( window ).resize( init_tooltip );
						
			var remove_tooltip = function(){
				tooltip.animate( { top: '-=10', opacity: 0 }, 50, function(){
					jQuery( this ).remove();
				});
							
				target.attr( 'title', tip );
			};
						
			target.on( 'mouseleave', remove_tooltip );
			tooltip.on( 'click', remove_tooltip );
		});
	});
</script>
